{"version":3,"file":"static/js/273.736df01f.chunk.js","mappings":"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","sources":["hooks/http.hook.js","services/MarvelServices.js","components/singleComic/SingleComicPage.js","components/pages/SingleComicPage.js","components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/errorBoundary/ErrorBoundary.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false),\r\n        [error, setError] = useState(null);\r\n\r\n    const request = useCallback(\r\n        async (\r\n            url,\r\n            method = 'GET',\r\n            body = null,\r\n            headers = { 'Content-Type': 'application/json' }\r\n        ) => {\r\n            setLoading(true);\r\n\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                setLoading(false);\r\n                return data;\r\n            } catch (e) {\r\n                setLoading(false);\r\n                setError(e.message);\r\n                throw e;\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {\r\n        loading,\r\n        request,\r\n        error,\r\n        clearError,\r\n    };\r\n};\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://marvel-server-zeta.vercel.app/',\r\n        _apiKey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df',\r\n        _baseOffset = 0;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    };\r\n\r\n    const getCharacter = async id => {\r\n        const res = await request(`${_apiBase}characters?&${_apiKey}`).then(res =>\r\n            res.data.results.filter(item => item.id === id)\r\n        );\r\n        return _transformCharacter(res[0]);\r\n    };\r\n\r\n    const getComic = async id => {\r\n        const res = await request(`${_apiBase}comics?&${_apiKey}`).then(res =>\r\n            res.data.results.filter(item => item.id == id)\r\n        );\r\n        return _transformComic(res[0]);\r\n    };\r\n\r\n    const _transformCharacter = char => {\r\n        let thumbnail;\r\n        if (\r\n            char.thumbnail.path ===\r\n            'https://www.wallpaperflare.com/static/264/707/824/iron-man-the-avengers-robert-downey-junior-tony-wallpaper'\r\n        ) {\r\n            thumbnail = 'https://i.pinimg.com/736x/d7/09/a0/d709a0e9416d99e7b1487b714f81d368.jpg';\r\n        } else {\r\n            thumbnail = char.thumbnail.path + '.' + char.thumbnail.extension;\r\n        }\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? `${char.description.slice(0, 210)}...`\r\n                : 'there is no description for this character',\r\n            thumbnail,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n        };\r\n    };\r\n\r\n    const _transformComic = ({\r\n        description,\r\n        id,\r\n        pageCount,\r\n        prices: [{ price }],\r\n        thumbnail: { extension, path },\r\n        textObjects: { languages },\r\n        title,\r\n    }) => {\r\n        return {\r\n            description,\r\n            id,\r\n            pageCount,\r\n            price,\r\n            extension,\r\n            languages,\r\n            path,\r\n            title,\r\n        };\r\n    };\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        clearError,\r\n        getAllComics,\r\n        getComic,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useParams, Link } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelServices';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComic = () => {\r\n    const { comicId } = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const { loading, error, getComic, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId]);\r\n\r\n    const updateComic = () => {\r\n        if (!comicId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        getComic(comicId).then(onComicLoaded);\r\n    };\r\n\r\n    const onComicLoaded = comic => {\r\n        setComic(comic);\r\n    };\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    );\r\n};\r\n\r\nconst View = ({ comic }) => {\r\n    const { title, path, extension, description, price, pageCount, languages } = comic;\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={path + '.' + extension} alt={title} className=\"single-comic__img\" />\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount} pages</p>\r\n                <p className=\"single-comic__descr\">Language: {languages}</p>\r\n                <div className=\"single-comic__price\">{price}$</div>\r\n            </div>\r\n            <Link to={'/comics'} className=\"single-comic__back\">\r\n                Back to all\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleComic;\r\n","import SingleComic from '../../components/singleComic/SingleComicPage';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nconst SingleComicPage = () => {\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <SingleComic />\r\n            </ErrorBoundary>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SingleComicPage;\r\n","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import error from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            style={{\r\n                display: 'block',\r\n                width: '250px',\r\n                height: '250px',\r\n                objectFit: 'contain',\r\n                margin: '0 auto',\r\n            }}\r\n            alt=\"error\"\r\n            src={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    };\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            error: true,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n"],"names":["useMarvelService","loading","request","error","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","thumbnail","path","extension","id","name","description","slice","homepage","urls","wiki","_transformComic","_ref","pageCount","prices","price","textObjects","languages","title","getAllCharacters","offset","arguments","length","undefined","results","map","getCharacter","res","then","filter","item","getAllComics","getComic","View","comic","_jsxs","className","children","_jsx","src","alt","Link","to","SingleComic","comicId","useParams","setComic","useEffect","updateComic","onComicLoaded","errorMessage","ErrorMessage","spinner","Spinner","content","_Fragment","AppBanner","SingleComicPage","ErrorBoundary","avengers","avengersLogo","style","display","width","height","objectFit","margin","Component","constructor","state","componentDidCatch","this","setState","render","props"],"sourceRoot":""}