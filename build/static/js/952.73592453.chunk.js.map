{"version":3,"file":"static/js/952.73592453.chunk.js","mappings":"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","sources":["hooks/http.hook.js","services/MarvelServices.js","components/errorMessage/ErrorMessage.js","components/errorBoundary/ErrorBoundary.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/pages/MainPage.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false),\r\n        [error, setError] = useState(null);\r\n\r\n    const request = useCallback(\r\n        async (\r\n            url,\r\n            method = 'GET',\r\n            body = null,\r\n            headers = { 'Content-Type': 'application/json' }\r\n        ) => {\r\n            setLoading(true);\r\n\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                setLoading(false);\r\n                return data;\r\n            } catch (e) {\r\n                setLoading(false);\r\n                setError(e.message);\r\n                throw e;\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {\r\n        loading,\r\n        request,\r\n        error,\r\n        clearError,\r\n    };\r\n};\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://marvel-server-zeta.vercel.app/',\r\n        _apiKey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df',\r\n        _baseOffset = 0;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    };\r\n\r\n    const getCharacter = async id => {\r\n        const res = await request(`${_apiBase}characters?&${_apiKey}`).then(res =>\r\n            res.data.results.filter(item => item.id === id)\r\n        );\r\n        return _transformCharacter(res[0]);\r\n    };\r\n\r\n    const getComic = async id => {\r\n        const res = await request(`${_apiBase}comics?&${_apiKey}`).then(res =>\r\n            res.data.results.filter(item => item.id == id)\r\n        );\r\n        return _transformComic(res[0]);\r\n    };\r\n\r\n    const _transformCharacter = char => {\r\n        let thumbnail;\r\n        if (\r\n            char.thumbnail.path ===\r\n            'https://www.wallpaperflare.com/static/264/707/824/iron-man-the-avengers-robert-downey-junior-tony-wallpaper'\r\n        ) {\r\n            thumbnail = 'https://i.pinimg.com/736x/d7/09/a0/d709a0e9416d99e7b1487b714f81d368.jpg';\r\n        } else {\r\n            thumbnail = char.thumbnail.path + '.' + char.thumbnail.extension;\r\n        }\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? `${char.description.slice(0, 210)}...`\r\n                : 'there is no description for this character',\r\n            thumbnail,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n        };\r\n    };\r\n\r\n    const _transformComic = ({\r\n        description,\r\n        id,\r\n        pageCount,\r\n        prices: [{ price }],\r\n        thumbnail: { extension, path },\r\n        textObjects: { languages },\r\n        title,\r\n    }) => {\r\n        return {\r\n            description,\r\n            id,\r\n            pageCount,\r\n            price,\r\n            extension,\r\n            languages,\r\n            path,\r\n            title,\r\n        };\r\n    };\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        clearError,\r\n        getAllComics,\r\n        getComic,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import error from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            style={{\r\n                display: 'block',\r\n                width: '250px',\r\n                height: '250px',\r\n                objectFit: 'contain',\r\n                margin: '0 auto',\r\n            }}\r\n            alt=\"error\"\r\n            src={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    };\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            error: true,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelServices';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport Spinner from '../../components/spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const onCharLoaded = char => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * 20) + 1;\n        getCharacter(id).then(onCharLoaded);\n    };\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!\n                    <br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">Or choose another one</p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    );\n};\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelServices';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport './charList.scss';\r\n\r\nconst CharList = props => {\r\n    const [data, setData] = useState([]),\r\n        [newItemLoading, setNewItemLoading] = useState(false),\r\n        [offset, setOffset] = useState(-3),\r\n        [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest();\r\n    }, []);\r\n\r\n    const onRequest = offset => {\r\n        setNewItemLoading(true);\r\n        getAllCharacters(offset).then(onCharListLoaded);\r\n    };\r\n\r\n    const onCharListLoaded = newData => {\r\n        let ended = false;\r\n        if (newData.length === 0) {\r\n            ended = true;\r\n        }\r\n\r\n        const filteredNewData = newData.filter(\r\n            newItem => !data.some(existingItem => existingItem.id === newItem.id)\r\n        );\r\n\r\n        setData([...data, ...filteredNewData]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset => offset + 3);\r\n        setCharEnded(ended);\r\n    };\r\n\r\n    let itemRefs = useRef([]);\r\n\r\n    const focusOnItem = id => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    };\r\n\r\n    const renderItems = arr => {\r\n        const items = arr.map((item, i) => {\r\n            return (\r\n                <li\r\n                    className=\"char__item\"\r\n                    tabIndex={0}\r\n                    ref={elem => (itemRefs.current[i] = elem)}\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id);\r\n                        focusOnItem(i);\r\n                    }}\r\n                    onKeyDown={e => {\r\n                        if (e.key === ' ' || e.key === 'Enter') {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}\r\n                >\r\n                    <img src={item.thumbnail} alt={item.name} />\r\n                    <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return <ul className=\"char__grid\">{items}</ul>;\r\n    };\r\n\r\n    const items = renderItems(data);\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n\r\n    return (\r\n        <div className=\"char_list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{ display: charEnded ? 'none' : '' }}\r\n                onClick={() => onRequest(offset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharList;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    );\n};\n\nexport default Skeleton;\n","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelServices';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nconst CharInfo = props => {\n    const [char, setChar] = useState(null);\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId).then(onCharLoaded);\n    };\n\n    const onCharLoaded = char => {\n        setChar(char);\n    };\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    );\n};\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">Homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                <li className=\"char__comics-item\">All-Winners Squad: Band of Heroes (2011) #3</li>\n                <li className=\"char__comics-item\">Alpha Flight (1983) #50</li>\n                <li className=\"char__comics-item\">Amazing Spider-Man (1999) #503</li>\n                <li className=\"char__comics-item\">Amazing Spider-Man (1999) #504</li>\n                <li className=\"char__comics-item\">\n                    AMAZING SPIDER-MAN VOL. 7: BOOK OF EZEKIEL TPB (Trade Paperback)\n                </li>\n                <li className=\"char__comics-item\">\n                    Amazing-Spider-Man: Worldwide Vol. 8 (Trade Paperback)\n                </li>\n                <li className=\"char__comics-item\">\n                    Asgardians Of The Galaxy Vol. 2: War Of The Realms (Trade Paperback)\n                </li>\n                <li className=\"char__comics-item\">Vengeance (2011) #4</li>\n                <li className=\"char__comics-item\">Avengers (1963) #1</li>\n                <li className=\"char__comics-item\">Avengers (1996) #1</li>\n            </ul>\n        </>\n    );\n};\n\nexport default CharInfo;\n","import { useState } from 'react';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n    const onCharSelected = id => {\r\n        setSelectedChar(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n"],"names":["useMarvelService","loading","request","error","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","thumbnail","path","extension","id","name","description","slice","homepage","urls","wiki","_transformComic","_ref","pageCount","prices","price","textObjects","languages","title","getAllCharacters","offset","arguments","length","undefined","results","map","getCharacter","res","then","filter","item","getAllComics","getComic","ErrorMessage","_jsx","style","display","width","height","objectFit","margin","alt","src","ErrorBoundary","Component","constructor","state","componentDidCatch","this","setState","render","props","children","View","_jsxs","className","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","errorMessage","spinner","Spinner","content","onClick","mjolnir","setData","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","onCharListLoaded","newData","ended","filteredNewData","newItem","some","existingItem","itemRefs","useRef","focusOnItem","current","forEach","classList","remove","add","focus","items","arr","i","tabIndex","ref","elem","onCharSelected","onKeyDown","key","renderItems","disabled","Skeleton","_Fragment","charId","skeleton","MainPage","selectedChar","setSelectedChar","CharList","CharInfo","decoration"],"sourceRoot":""}